## Ветвление в GIT ###

Создать ветку :
1.Давайте посмотрим, какие ветки есть сейчас в репозитории. Вводим команду - git branch
2.Создаём новую ветку командой - git branch develop
3.Давайте проверим, что ветка создана командой - git branch

Создать ветку и сделать в ней коммит :
1.Давайте посмотрим, какие ветки есть сейчас в репозитории. Вводим команду - git branch
2.Создаём новую ветку командой - git branch develop
3.Давайте проверим, что ветка создана командой. Она должна вернуть список из двух веток master и develop - git branch
4.Переходим во вновь созданную ветку develop - git checkout develop
5.Давайте сделаем изменение файла 1.txt. Добавим в него число 111 - echo 111 > 1.txt
6.Коммитим изменения файла 1.txt и вводим комментарий к коммиту "Изменения в файле 1.txt" - git add 1.txt и git commit
7.Вводим команду и смотрим историю коммитов и обращаем внимание, что в этой ветке есть созданный нами коммит - git log
8.Переходим обратно в ветку master - git checkout master
9.Вводим команду и смотрим историю коммитов и обращаем внимание, что в этой ветке нет созданного нами коммита - git log

Создание и одновременный переход в ветку :
1.Давайте посмотрим, какие ветки есть сейчас в репозитории. Вводим команду - git branch
2.Создаём новую ветку командой и сразу же перейдём в неё - git checkout -b develop
3. Вводим заново команду  и видим что возвращает обе ветки master и develop - git branch

Удаление веток :
1.Давайте посмотрим, какие ветки есть сейчас в репозитории. Вводим команду - git branch
2.Создаём новую ветку командой - git branch develop
3.Вводим заново команду, должна вернуть список из двух веток master и develop - git branch
4.Теперь давайте удалим ветку develop. Для этого воспользуемся командой - git branch -D develop
5.Вводим заново команду, должна вернуть список только ветку master, потому что ветка develop удалена - git branch

Переименование веток :
1.Давайте посмотрим, какие ветки есть сейчас в репозитории. Вводим команду - git branch
2.Создаём новую ветку командой - git branch develop
3.Вводим заново команду, она должна вернуть список из двух веток master и develop - git branch
4.Воспользуемся командой - git branch -m test_develop
5.Вводим заново команду и смотрим изменения - git branch

Переход по коммитам ветки :
1.Давайте посмотрим, какие ветки есть сейчас в репозитории. Вводим команду - git branch
2.Мы можем посмотреть, какие есть коммиты в ветке master. Вводим команду - git log
3.Видим, что в ветке master у нас 3 коммита. Так же в репозитории есть три файла. Вы можете увидеть эти файлы, если введёте команду - ls
4.Давайте перейдём на один коммит назад. Выполняем команду - git checkout HEAD^
5.Давайте разберёмся, что происходит в этой команде. checkout - команда, которая позволяет "гулять" по репозиторию, как по веткам, так и по коммитам. HEAD - это указатель 
на последний коммит текущей ветки. То есть в ветке master последним коммитом является Third commit. HEAD указывает, что мы будем работать с этим коммитом. ^ показывает на один шаг назад. 
Учитывая, что эта директива стоит около HEAD, значит, на один коммит назад от HEAD. То есть на коммит раньше, а именно на Second commit
6.Смотрим историю коммитов - git log
7.И видим, что теперь история коммитов заканчивается на коммите, на котором мы находимся. Более того, Third commit, который в данный момент не отображается, добавил файл 3.txt. Если мы сейчас 
введём команду - ls
8.Давайте вернёмся - git checkout master
9.Давайте проведём ещё один тест. Вернёмся на два коммита назад теперь - git checkout HEAD^^
10.Теперь выполним команду. И посмотрим историю коммитов. Судя по результату мы окажемся на последнем коммите снова. Это доказательство того, что ветки - это указатели на коммиты - git checkout master

Создать ветку из определённого коммита :
1.Давайте посмотрим, какие ветки есть сейчас в репозитории. Вводим команду - git branch
2.Мы можем посмотреть, какие есть коммиты в ветке master. Вводим команду - git log
3.Видим, что в ветке master у нас 3 коммита. Давайте создадим ветку из второго коммита ветки мастер, который называется Second commit
4.Для начала нам нужно перейти в этот коммит. Выполняем команду - git checkout HEAD^
5.Давайте разберёмся, что происходит в этой команде. checkout - команда, которая позволяет "гулять" по репозиторию, как по веткам, так и по commit'ам. HEAD - это указатель на последний коммит 
текущей ветки. То есть в ветке master последним коммитом является Third commit. HEAD указывает, что мы будем работать с этим коммитом. ^ показывает на один шаг назад. Учитывая, что эта 
директива стоит около HEAD, значит, на один коммит назад от HEAD. То есть на коммит раньше, а именно на Second commit
6.После перехода к этому коммиту мы можем тут создать новую ветку. Создаём новую ветку командой - git branch develop
7.Переходим во вновь созданную ветку develop - git checkout develop
8.Давайте сделаем изменение файла 1.txt. Добавим в него число 111 - echo 111 > 1.txt
9.Коммитим изменения файла 1.txt - git add 1.txt и git commit
10.Вводим комментарий к commit'у "Третий commit в ветке develop"
11.Вводим команду, Чтобы проверить содержимое файла. Она должна вернуть 111 - cat 1.txt
12.Вводим команду, Смотрим историю коммитов и обращаем внимание, что в этой ветке есть созданный нами коммит, но нет коммита Third commit, который мы видели в ветке master. Это связано с тем,
что мы создали новую ветку раньше этого коммита, поэтому он здесь не оказалсяммитов и обращаем внимание, что в этой ветке есть созданный нами коммит, но нет коммита Third commit, который 
мы видели в ветке master. Это связано с тем, что мы создали новую ветку раньше этого коммита, поэтому он здесь не оказался - git log
13.Переходим обратно в ветку master - git checkout master
14.Вводим команду, Чтобы проверить содержимое файла. Она должна вернуть 11 - cat 1.txt
15.Вводим команду, Смотрим историю коммитов и обращаем внимание, что в этой ветке нет созданного нами коммита, но зато остался коммит Third commit, который изначально здесь был - git log
