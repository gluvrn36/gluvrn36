Установка Git Ubuntu :
sudo apt install git-all

Проверка версии Git :
git --version

Создание локального репозитория :
1.Создайте папку под названием командой - mkdir test_repo
2.Перейдите в папку test_repo командой - cd test_repo
3.После того, как вы оказались внутри папки, сделайте команду - git init
4.Введите команду что в папке теперь подпапка .git - ls -la

Организовать связь между удалённым и локальным репозиториями :
1.Перейдите в локальный репозиторий - cd ~/projects/test_repo
2.Переключимся на ветку main, т.к. при создании репозитория в gitlab по умолчанию создается ветка main. А при инициализации git init в консоли у нас текущая ветка master - git checkout -b main
3.Создаем файл - touch 1.txt
4.Добавим существующие файлы для отслеживания git'ом - git add .
5.Создаем коммит - git commit -m "First commit"
6.Пушим изменения - git push -u origin main
7.Команда выполненная в репозитории, должна возвращать ответ origin - git remote

Выполнить команду clone (projectName test_clone) :
1.Перейдите на страницу ваших проектов "Projects" → "Your projects". Найдите там репозиторий под названием test_clone, зайдите в него
2.Нажмите на синюю кнопку "Clone", которая находится справа. Выберите команду, которая находится под заголовком "Clone with SSH", скопируйте её
3.Перейдите в папку ~/projects командой - cd ~/projects
4.Напишите в начале командной строки git clone и вставьте скопированную команду - git clone git@gitlab.xxx.xx:git_sXXXXXX/test_clone.git -b master
5.После успешного выполнения команды, выполните команду - ls

### Коммиты и все что связано с ними ###

Выполнить первый коммит :
1.В папке есть 3 файла 1.txt, 2.txt, 3.txt. Отправьте в файл 1.txt число 111 с помощью команды - echo 111 > 1.txt
2.Введите команду, показывает список файлов, у которых прошли изменения - git status
3.Введите команду - git add .
4.Введите команду - git commit
5.В открывшемся редакторе нажмите i, введите комментарий коммита Первый коммит, далее нажимайте по порядку Esc, :wq, Enter

Выполнить коммит короткой командой :
1.В папке есть 3 файла 1.txt, 2.txt, 3.txt. Отправьте в файл 1.txt число 111 с помощью команды - echo 111 > 1.txt
2.Введите команду, показывает список файлов, у которых прошли изменения - git status
3.Введите команду - git add .
4.Введите команду - git commit -m "Второй коммит"

Сделать пустой коммит :
1.Введите команду - git commit --allow-empty -m "Пустой коммит"
2.Введите команду, показывает список коммитов - git log

Удалить файл из Git и закоммитить изменение :
1.Перейдите в репозиторий ~/projects/test_rf_commit с помощью команды - cd ~/projects/test_rf_commit
2.Введите команду для просмотра файлов в каталоге - ls
3.Чтобы удалить файл с добавлением изменения в индекс коммита, выполняем команду - git rm 1.txt
4.Введите команду, оказывает список файлов, у которых прошли изменения. Отмечен файл 1.txt, напротив него написано "deleted" - git status
5.Введите команду - git commit
6.В открывшемся редакторе нажмите i, введите комментарий коммита Удален файл 1.txt, далее нажимайте по порядку Esc, :wq, Enter

Сбросить ненужные изменения до добавления в индекс :
1.В папке есть 1.txt с содержимым 11. Введите команду - ls
2.Выполните изменение содержимого файла 1.txt, добавляя в него число 111 . Выполняем команду - echo 111 > 1.txt
3.Вводим команду, видим наш файл в изменениях - git status
4.После этого мы понимаем, что не хотели изменять по какой-либо причине файл 1.txt. Нам нужно сбросить его содержимое до исходного состояния. В простом варианте, 
мы можем просто открыть файл и заменить там число на 11, но давайте представим, что таких изменениях нами было сделано много. И вернуть в исходное состояние уже не представляется возможным, 
потому что мы не помним все изменения. Для этого используем команду - git checkout 1.txt
5.После этого вводим команду - git status
6.Файл 1.txt должен отсутствовать в результате работы этой команды. Вы только что удалили ненужные изменения из файла средствами Git. Будьте осторожны!!! Изменения, 
которые вы удаляете таким образом исчезают навсегда.

Сбросить все ненужные изменения до добавления в индекс :
1.В папке есть 2 файла 1.txt с содержимым 11 и 2.txt с содержимым 22. Введите команду - ls
2.Выполните изменение содержимого файла 1.txt, добавляя в него число 111. Выполняем команду - echo 111 > 1.txt
3.Вводим команду и видим изменённые файлы в изменениях - git status
4.После этого мы понимаем, что не хотели изменять по какой-либо причине файлы 1.txt и 2.txt. Нам нужно сбросить содержимое его файлов до исходного состояния. В простом варианте, мы можем 
просто открыть файлы и внести в них числа 11 и 22 соответственно, но давайте представим, что таких изменениях нами было сделано много. И вернуть в исходное состояние уже не представляется 
возможным, потому что мы не помним все изменения. Для этого используем команду git checkout. Но чтобы сбросить изменения во всех файлах добавляем к ней аргумент <.> , который нам скажет, 
сбросить все изменения в конкретной папке и её подпапках. Вводим - git checkout .
5.После этого вводим команду, Файлы 1.txt и 2.txt должны отсутствовать в результате работы этой команды - git status
6.Вы только что удалили ненужные изменения из файлов средствами Git. Будьте осторожны!!! С помощью выше представленной команды вы удалите ВСЕ изменения, которые ещё не были добавлены в индекс. 
Среди этих изменений могут быть важные, которые будут утеряны навсегда. Советуем вам очень осторожно использовать команду git checkout .

Сбросить все ненужные изменения в конкретной папке до добавления в индекс :
1.Переходим в папку с проектов. В папке есть подпапка "code", в которой есть 2 файла 1.txt с содержимым 11 и 2.txt с содержимым 22. Вне папки "code" лежит файл 3.txt с содержимым 33
2.Выполните изменение содержимого файла 1.txt, добавляя в него число 111. Выполняем команду - echo 111 > code/1.txt
3.Выполните изменение содержимого файла 2.txt, добавляя в него число 222. Выполняем команду - echo 222 > code/2.txt
3.Выполните изменение содержимого файла 3.txt, добавляя в него число 333. Выполняем команду - echo 333 > 3.txt
4.Вводим команду и видим три изменённых файла в изменениях - git status
5.После этого мы понимаем, что не хотели изменять по какой-либо причине файлы 1.txt и 2.txt. При этом мы хотим оставить изменения в файле 3.txt. То есть нам нужно сбросить только содержимое файлов, 
которые находятся в папке "code". В простом варианте, мы можем открыть файлы и внести в них числа 11 и 22 соответственно, но давайте представим, что таких изменений нами было сделано много. 
И вернуть в исходное состояние уже не представляется возможным, потому что мы не помним все изменения. Для этого используем команду git checkout. Но чтобы сбросить изменения в конкретной папке 
добавляем к ней аргумент code, который нам скажет, сбросить все изменения в конкретной папке и её подпапках. Вводим - git checkout code
6.После этого вводим команду, файлы 1.txt и 2.txt должны отсутствовать в результате работы этой команды - git status
7.Будьте осторожны!!! С помощью выше представленной команды вы удалите ВСЕ изменения, которые ещё не были добавлены в индекс. Среди этих изменений могут быть важные, которые будут утеряны 
навсегда. Советуем вам очень осторожно использовать команду git checkout <directory path>

Сбросить изменения, которые уже были добавлены в индекс, но ещё не закоммичены :
1.В папке есть файл 1.txt с содержимым 11. Введите команду - ls
2.Выполните изменение содержимого файла 1.txt, добавляя в него число 111 . Выполняем команду - echo 111 > 1.txt
3.Вводим команду и видим наш файл в изменениях. Файл отмечен красным, что означает, что он ещё не добавлен в индекс - git status
4.Добавьте изменение в индекс - git add 1.txt
5.Вводим команду и видим наш файл в изменениях. Файл отмечен зелёным, что означает, что он добавлен в индекс - git status
6.После этого мы понимаем, что не хотели изменять по какой-либо причине файл 1.txt. Нам нужно удалить изменение из индекса и сбросить его содержимое до исходного состояния. В простом варианте, 
мы можем просто открыть файл и заменить там число на 11, но давайте представим, что таких изменениях нами было сделано много. И вернуть в исходное состояние уже не представляется возможным, 
потому что мы не помним все изменения. Для этого используем команду git reset. Вводим - git reset 1.txt
7.После этого вводим команду. Файл 1.txt теперь отмечен красным, что означает, что мы удалили его из индекса - git status
8.Вводим команду чтобы сбросить изменения в этом файле - git checkout 1.txt
9.Вы только что удалили ненужные изменения из файла после добавления в индекс средствами Git. Будьте осторожны!!! Изменения, которые вы удаляете таким образом исчезают навсегда

## Ветвление в GIT ###

Создать ветку :
1.Давайте посмотрим, какие ветки есть сейчас в репозитории. Вводим команду - git branch
2.Создаём новую ветку командой - git branch develop
3.Давайте проверим, что ветка создана командой - git branch

Создать ветку и сделать в ней коммит :
1.Давайте посмотрим, какие ветки есть сейчас в репозитории. Вводим команду - git branch
2.Создаём новую ветку командой - git branch develop
3.Давайте проверим, что ветка создана командой. Она должна вернуть список из двух веток master и develop - git branch
4.Переходим во вновь созданную ветку develop - git checkout develop
5.Давайте сделаем изменение файла 1.txt. Добавим в него число 111 - echo 111 > 1.txt
6.Коммитим изменения файла 1.txt и вводим комментарий к коммиту "Изменения в файле 1.txt" - git add 1.txt и git commit
7.Вводим команду и смотрим историю коммитов и обращаем внимание, что в этой ветке есть созданный нами коммит - git log
8.Переходим обратно в ветку master - git checkout master
9.Вводим команду и смотрим историю коммитов и обращаем внимание, что в этой ветке нет созданного нами коммита - git log

Создание и одновременный переход в ветку :
1.Давайте посмотрим, какие ветки есть сейчас в репозитории. Вводим команду - git branch
2.Создаём новую ветку командой и сразу же перейдём в неё - git checkout -b develop
3. Вводим заново команду  и видим что возвращает обе ветки master и develop - git branch

Удаление веток :
1.Давайте посмотрим, какие ветки есть сейчас в репозитории. Вводим команду - git branch
2.Создаём новую ветку командой - git branch develop
3.Вводим заново команду, должна вернуть список из двух веток master и develop - git branch
4.Теперь давайте удалим ветку develop. Для этого воспользуемся командой - git branch -D develop
5.Вводим заново команду, должна вернуть список только ветку master, потому что ветка develop удалена - git branch
