Пример регистрации контейнера Docker (gitlab-runner):
docker run -it --rm --name gitlab-runner -v /var/run/docker.sock:/var/run/docker.sock -v $(pwd)/config:/etc/gitlab-runner gitlab/gitlab-runner:alpine3.14-v14.10.0 register

```
Enter the GitLab instance URL (for example, https://gitlab.com/):
https://gitlab.xxxx.xx/  ## Вводим url нашего хоста Gitlab
Enter the registration token:
<Ваш токен>   ## Наш токен из Gitlab, который взяли из нашего проекта (Settings -> CI/CD -> Runners -> : -> Registration token)
Enter a description for the runner:
[56a6b5g741e0]: My first runner
Enter tags for the runner (comma-separated):
local,docker
Enter optional maintenance note for the runner:
Enter an executor: docker, parallels, virtualbox, kubernetes, custom, docker-ssh, shell, ssh, docker+machine, docker-ssh+machine:
docker
Enter the default Docker image (for example, ruby:2.7):
alpine:3.14
Runner registered successfully. Feel free to start it, but if it's running already the config should be automatically reloaded!
```

Пример запуска контейнера Docker :
docker run -d --name gitlab-runner -v /var/run/docker.sock:/var/run/docker.sock -v $(pwd)/config:/etc/gitlab-runner gitlab/gitlab-runner:alpine3.14-v14.10.0

Проверка запущенных контейнеров :
docker ps

Просмотр логов :
docker logs name-container-docker

Зайти внутрь контейнера Docker :
docker exec -it gitlab-runner /bin/bash

Создать runner в не интерактивном режиме :
выполняем действия под root -> sudo -i
1.Регистрируем runner :
curl --request POST "https://url-gitlab/api/v4/runners" --form "token=Regestration token" --form "description=my-first-runner" --form "tag_list=local,docker,docker-executor" --form "run-untagged=false" --form "image=alpine:3.14" --form "executor=docker"
2.После регистрации получаем json ответ из него сохраняем token
3.Создаем папку config -> mkdir confid -> chmod 777 config
4.Создаем файл config.toml -> touch config.toml -> chmod 777 config.toml
5.Открываем файл config.toml и вписываем настройки :
concurrent = 1
check_interval = 0

[session_server]
  session_timeout = 1800

[[runners]]
  name = "my-first-runner"
  url = "https://gitlab.slurm.io/"
  token = "glrtr-eFSdMz1T5kMGReKbZhyg6W86MQpwOjJ6cDQKdDozDg.01.161e12hna"
  executor = "docker"
  [runners.custom_build_dir]
  [runners.cache]
    [runners.cache.s3]
    [runners.cache.gcs]
    [runners.cache.azure]
  [runners.docker]
    tls_verify = false
    image = "alpine:3.14"
    privileged = false
    disable_entrypoint_overwrite = false
    oom_kill_disable = false
    disable_cache = false
    volumes = ["/var/run/docker.sock:/var/run/docker.sock", "/artifacts:/artifacts", "/cache"]
    shm_size = 0
6.Запускаем runner :
docker run -d --name gitlab-runner --restart always \
  -v /var/run/docker.sock:/var/run/docker.sock \
  -v $(pwd)/config:/etc/gitlab-runner \
  gitlab/gitlab-runner:alpine3.14-v14.10.0
7.Проверяем в gitlab -> project -> settings -> ci/cd -> runners что он там появился и активный

